let map;
let currentLocation;
let routingControl;
let tutorialStep = 0;
let selectedLanguage = 'pt';

// Passos do tutorial em diferentes idiomas
const tutorialSteps = {
    pt: [
        'Bem-vindo ao Morro Digital! Este tutorial ir√° gui√°-lo atrav√©s das funcionalidades do site.',
        'Primeiro, veja o mapa interativo que mostra sua localiza√ß√£o atual e permite explorar a √°rea ao redor.',
        'Use o bot√£o ‚ò∞ Menu para abrir e fechar o menu.',
        'No menu, voc√™ pode acessar informa√ß√µes sobre Hist√≥ria de Morro, Pontos Tur√≠sticos, Passeios, Praias, Vida Noturna, Restaurantes, Pousadas.',
        'Clique em qualquer item do menu para obter mais informa√ß√µes na caixa de mensagens.',
        'Voc√™ pode planejar sua viagem utilizando o bot√£o üìÖ Planejar Viagem.'
    ],
    en: [
        'Welcome to Morro Digital! This tutorial will guide you through the site features.',
        'First, see the interactive map that shows your current location and allows you to explore the surrounding area.',
        'Use the ‚ò∞ Menu button to open and close the menu.',
        'In the menu, you can access information about the History of Morro, Tourist Spots, Tours, Beaches, Nightlife, Restaurants, Inns.',
        'Click on any menu item to get more information in the message box.',
        'You can plan your trip using the üìÖ Plan Trip button.'
    ],
    es: [
        '¬°Bienvenido a Morro Digital! Este tutorial le guiar√° a trav√©s de las funciones del sitio.',
        'Primero, vea el mapa interactivo que muestra su ubicaci√≥n actual y le permite explorar el √°rea circundante.',
        'Use el bot√≥n ‚ò∞ Men√∫ para abrir y cerrar el men√∫.',
        'En el men√∫, puede acceder a informaci√≥n sobre la Historia de Morro, Lugares Tur√≠sticos, Excursiones, Playas, Vida Nocturna, Restaurantes, Posadas.',
        'Haga clic en cualquier elemento del men√∫ para obtener m√°s informaci√≥n en la caja de mensajes.',
        'Puede planear su viaje utilizando el bot√≥n üìÖ Planear Viaje.'
    ],
    he: [
        '◊ë◊®◊ï◊ö ◊î◊ë◊ê ◊ú-Morro Digital! ◊û◊ì◊®◊ô◊ö ◊ñ◊î ◊ô◊ì◊®◊ô◊ö ◊ê◊ï◊™◊ö ◊ë◊™◊õ◊ï◊†◊ï◊™ ◊î◊ê◊™◊®.',
        '◊®◊ê◊©◊ô◊™, ◊®◊ê◊î ◊ê◊™ ◊î◊û◊§◊î ◊î◊ê◊ô◊†◊ò◊®◊ê◊ß◊ò◊ô◊ë◊ô◊™ ◊©◊û◊®◊ê◊î ◊ê◊™ ◊î◊û◊ô◊ß◊ï◊ù ◊î◊†◊ï◊õ◊ó◊ô ◊©◊ú◊ö ◊ï◊û◊ê◊§◊©◊®◊™ ◊ú◊ö ◊ú◊ó◊ß◊ï◊® ◊ê◊™ ◊î◊ê◊ñ◊ï◊® ◊©◊û◊°◊ë◊ô◊ë.',
        '◊î◊©◊™◊û◊© ◊ë◊õ◊§◊™◊ï◊® ‚ò∞ Menu ◊ú◊§◊™◊ô◊ó◊™ ◊ï◊°◊í◊ô◊®◊™ ◊î◊™◊§◊®◊ô◊ò.',
        '◊ë◊™◊§◊®◊ô◊ò, ◊™◊ï◊õ◊ú ◊ú◊í◊©◊™ ◊ú◊û◊ô◊ì◊¢ ◊¢◊ú ◊î◊î◊ô◊°◊ò◊ï◊®◊ô◊î ◊©◊ú ◊û◊ï◊®◊ï, ◊û◊ß◊ï◊û◊ï◊™ ◊™◊ô◊ô◊®◊ï◊™◊ô◊ô◊ù, ◊°◊ô◊ï◊®◊ô◊ù, ◊ó◊ï◊§◊ô◊ù, ◊ó◊ô◊ô ◊ú◊ô◊ú◊î, ◊û◊°◊¢◊ì◊ï◊™, ◊ë◊™◊ô ◊û◊ú◊ï◊ü.',
        '◊ú◊ó◊• ◊¢◊ú ◊õ◊ú ◊§◊®◊ô◊ò ◊ë◊™◊§◊®◊ô◊ò ◊õ◊ì◊ô ◊ú◊ß◊ë◊ú ◊û◊ô◊ì◊¢ ◊†◊ï◊°◊£ ◊ë◊™◊ô◊ë◊™ ◊î◊î◊ï◊ì◊¢◊ï◊™.',
        '◊ê◊™◊î ◊ô◊õ◊ï◊ú ◊ú◊™◊õ◊†◊ü ◊ê◊™ ◊î◊ò◊ô◊ï◊ú ◊©◊ú◊ö ◊ë◊ê◊û◊¶◊¢◊ï◊™ ◊õ◊§◊™◊ï◊® üìÖ ◊™◊õ◊†◊ï◊ü ◊ò◊ô◊ï◊ú.'
    ]
};

// Tradu√ß√£o dos textos
const translations = {
    en: {
        'Bem-vindo ao Morro Digital!': 'Welcome to Morro Digital!',
        'Selecione um idioma:': 'Select a language:',
        'Permiss√£o de Localiza√ß√£o': 'Location Permission',
        'Precisamos de sua permiss√£o para acessar sua localiza√ß√£o:': 'We need your permission to access your location:',
        'Permiss√£o de Microfone': 'Microphone Permission',
        'Precisamos de sua permiss√£o para acessar seu microfone:': 'We need your permission to access your microphone:',
        'Hist√≥ria de Morro de S√£o Paulo': 'History of Morro de S√£o Paulo',
        'Conhe√ßa a rica hist√≥ria de Morro de S√£o Paulo, uma ilha cheia de cultura e tradi√ß√µes...': 'Learn about the rich history of Morro de S√£o Paulo, an island full of culture and traditions...',
        'Fundada no s√©culo XVI, Morro de S√£o Paulo tem uma hist√≥ria fascinante que inclui invas√µes de piratas, constru√ß√µes coloniais e muito mais.': 'Founded in the 16th century, Morro de S√£o Paulo has a fascinating history that includes pirate invasions, colonial buildings, and much more.'
    },
    es: {
        'Bem-vindo ao Morro Digital!': '¬°Bienvenido a Morro Digital!',
        'Selecione um idioma:': 'Seleccione un idioma:',
        'Permiss√£o de Localiza√ß√£o': 'Permiso de Ubicaci√≥n',
        'Precisamos de sua permiss√£o para acessar sua localiza√ß√£o:': 'Necesitamos su permiso para acceder a su ubicaci√≥n:',
        'Permiss√£o de Microfone': 'Permiso de Micr√≥fono',
        'Precisamos de sua permiss√£o para acessar seu microfone:': 'Necesitamos su permiso para acceder a su micr√≥fono:',
        'Hist√≥ria de Morro de S√£o Paulo': 'Historia de Morro de S√£o Paulo',
        'Conhe√ßa a rica hist√≥ria de Morro de S√£o Paulo, uma ilha llena de cultura y tradiciones...': 'Conozca la rica historia de Morro de S√£o Paulo, una isla llena de cultura y tradiciones...',
        'Fundada no s√©culo XVI, Morro de S√£o Paulo tem uma hist√≥ria fascinante que inclui invasiones de piratas, construcciones coloniales y mucho m√°s.': 'Fundada en el siglo XVI, Morro de S√£o Paulo tiene una historia fascinante que incluye invasiones de piratas, construcciones coloniales y mucho m√°s.'
    },
    he: {
        'Bem-vindo ao Morro Digital!': '◊ë◊®◊ï◊ö ◊î◊ë◊ê ◊ú-Morro Digital!',
        'Selecione um idioma:': '◊ë◊ó◊® ◊©◊§◊î:',
        'Permiss√£o de Localiza√ß√£o': '◊î◊®◊©◊ê◊™ ◊û◊ô◊ß◊ï◊ù',
        'Precisamos de sua permiss√£o para acessar sua localiza√ß√£o:': '◊ê◊†◊ï ◊ñ◊ß◊ï◊ß◊ô◊ù ◊ú◊î◊®◊©◊ê◊™◊ö ◊õ◊ì◊ô ◊ú◊í◊©◊™ ◊ú◊û◊ô◊ß◊ï◊û◊ö:',
        'Permiss√£o de Microfone': '◊î◊®◊©◊ê◊™ ◊û◊ô◊ß◊®◊ï◊§◊ï◊ü',
        'Precisamos de sua permiss√£o para acessar seu microfone:': '◊ê◊†◊ï ◊ñ◊ß◊ï◊ß◊ô◊ù ◊ú◊î◊®◊©◊ê◊™◊ö ◊õ◊ì◊ô ◊ú◊í◊©◊™ ◊ú◊û◊ô◊ß◊®◊ï◊§◊ï◊ü ◊©◊ú◊ö:',
        'Hist√≥ria de Morro de S√£o Paulo': '◊î◊î◊ô◊°◊ò◊ï◊®◊ô◊î ◊©◊ú ◊û◊ï◊®◊ï ◊ì◊î ◊°◊ê◊ï ◊§◊ê◊ï◊ú◊ï',
        'Conhe√ßa a rica hist√≥ria de Morro de S√£o Paulo, uma ilha cheia de cultura e tradi√ß√µes...': '◊ú◊û◊ì ◊¢◊ú ◊î◊î◊ô◊°◊ò◊ï◊®◊ô◊î ◊î◊¢◊©◊ô◊®◊î ◊©◊ú ◊û◊ï◊®◊ï ◊ì◊î ◊°◊ê◊ï ◊§◊ê◊ï◊ú◊ï, ◊ê◊ô ◊û◊ú◊ê ◊ë◊™◊®◊ë◊ï◊™ ◊ï◊û◊°◊ï◊®◊ï◊™...',
        'Fundada no s√©culo XVI, Morro de S√£o Paulo tem uma hist√≥ria fascinante que inclui ◊§◊ú◊ô◊©◊ï◊™ ◊§◊ô◊®◊ê◊ò◊ô◊ù, ◊û◊ë◊†◊ô◊ù ◊ß◊ï◊ú◊ï◊†◊ô◊ê◊ú◊ô◊ô◊ù ◊ï◊î◊®◊ë◊î ◊ô◊ï◊™◊®.': '◊†◊ï◊°◊ì◊î ◊ë◊û◊ê◊î ◊î-16, ◊ú◊û◊ï◊®◊ï ◊ì◊î ◊°◊ê◊ï ◊§◊ê◊ï◊ú◊ï ◊ô◊© ◊î◊ô◊°◊ò◊ï◊®◊ô◊î ◊û◊®◊™◊ß◊™ ◊î◊õ◊ï◊ú◊ú◊™ ◊§◊ú◊ô◊©◊ï◊™ ◊§◊ô◊®◊ê◊ò◊ô◊ù, ◊û◊ë◊†◊ô◊ù ◊ß◊ï◊ú◊ï◊†◊ô◊ê◊ú◊ô◊ô◊ù ◊ï◊î◊®◊ë◊î ◊ô◊ï◊™◊®.'
    }
};

// Fun√ß√£o para traduzir o conte√∫do do site
function selectLanguage(lang) {
    selectedLanguage = lang;
    document.querySelectorAll('[data-translate]').forEach(el => {
        el.innerText = translations[lang][el.getAttribute('data-translate')] || el.innerText;
    });
    closeModal('welcome-modal');
    openModal('location-permission-modal');
}

// Fun√ß√£o para solicitar permiss√£o de localiza√ß√£o
function requestLocationPermission() {
    navigator.geolocation.getCurrentPosition(position => {
        currentLocation = position.coords;
        initializeMap();
        closeModal('location-permission-modal');
        openModal('microphone-permission-modal');
    }, error => {
        alert('N√£o foi poss√≠vel obter sua localiza√ß√£o.');
    });
}

// Fun√ß√£o para solicitar permiss√£o de microfone
function requestMicrophonePermission() {
    if ('webkitSpeechRecognition' in window) {
        const recognition = new webkitSpeechRecognition();
        recognition.lang = selectedLanguage === 'pt' ? 'pt-BR' : selectedLanguage;
        recognition.continuous = false;
        recognition.interimResults = false;

        recognition.onstart = function() {
            closeModal('microphone-permission-modal');
            alert('Permiss√£o de microfone concedida.');
            startTutorial();
        };

        recognition.onerror = function(event) {
            if (event.error === 'not-allowed') {
                alert('Permiss√£o de microfone negada.');
            }
        };

        recognition.onend = function() {
            console.log('Reconhecimento de voz encerrado.');
        };

        recognition.start();
    } else {
        alert('API de reconhecimento de voz n√£o suportada neste navegador.');
    }
}

// Inicializa o mapa com a localiza√ß√£o do usu√°rio
function initializeMap() {
    map = L.map('map').setView([-13.370273, -38.907545], 15); // Coordenadas de Morro de S√£o Paulo

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap contributors'
    }).addTo(map);

    L.marker([-13.370273, -38.907545]).addTo(map)
        .bindPopup('Morro de S√£o Paulo')
        .openPopup();

    document.getElementById('loading-indicator').style.display = 'none';
}

// Inicia o tutorial interativo
function startTutorial() {
    tutorialStep = 0;
    nextTutorialStep();
}

// Mostra o pr√≥ximo passo do tutorial
function nextTutorialStep() {
    const messageBox = document.getElementById('message-box');
    if (tutorialStep < tutorialSteps[selectedLanguage].length) {
        messageBox.innerHTML = `<p>${tutorialSteps[selectedLanguage][tutorialStep]}</p><button onclick="nextTutorialStep()">Pr√≥ximo</button>`;
        speakText(tutorialSteps[selectedLanguage][tutorialStep]);
        messageBox.style.display = 'block';
        tutorialStep++;
    } else {
        messageBox.style.display = 'none';
    }
}

// Fecha o tutorial
function closeTutorial() {
    const messageBox = document.getElementById('message-box');
    messageBox.style.display = 'none';
}

// Fun√ß√£o para exibir mensagens de texto
function speakText(text) {
    if ('speechSynthesis' in window) {
        const utterance = new SpeechSynthesisUtterance(text);
        utterance.lang = selectedLanguage === 'pt' ? 'pt-BR' : selectedLanguage;
        speechSynthesis.speak(utterance);
    } else {
        console.warn('API de s√≠ntese de voz n√£o suportada neste navegador.');
    }
}

// Fun√ß√£o para exibir o submenu e carregar dados da OSM
function loadSubMenu(subMenuId) {
    const subMenu = document.getElementById(subMenuId);
    subMenu.style.display = 'block';

    const queries = {
        pontosTuristicosSubMenu: '[out:json];node["tourism"="attraction"](around:10000,-13.370273,-38.907545);out body;',
        passeiosSubMenu: '[out:json];node["tourism"="information"](around:10000,-13.370273,-38.907545);out body;',
        praiasSubMenu: '[out:json];node["natural"="beach"](around:10000,-13.370273,-38.907545);out body;',
        vidaNoturnaSubMenu: '[out:json];node["amenity"="nightclub"](around:10000,-13.370273,-38.907545);out body;',
        restaurantesSubMenu: '[out:json];node["amenity"="restaurant"](around:10000,-13.370273,-38.907545);out body;',
        pousadasSubMenu: '[out:json];node["tourism"="hotel"](around:10000,-13.370273,-38.907545);out body;'
    };

    fetchOSMData(queries[subMenuId]).then(data => displayOSMData(data, subMenuId));
}

// Busca dados da OpenStreetMap
async function fetchOSMData(query) {
    const url = `https://overpass-api.de/api/interpreter?data=${query}`;
    const response = await fetch(url);
    const data = await response.json();
    return data;
}

// Exibe os dados da OpenStreetMap
function displayOSMData(data, subMenuId) {
    const subMenu = document.getElementById(subMenuId);
    subMenu.innerHTML = ''; // Limpa o submenu antes de adicionar os novos elementos
    data.elements.forEach(element => {
        if (element.type === 'node' && element.tags.name) {
            // Adiciona apenas se houver um nome
            const btn = document.createElement('button');
            btn.className = 'submenu-btn';
            btn.textContent = element.tags.name;
            btn.onclick = () => showInfo(element.tags.name, [element.lat, element.lon]);
            subMenu.appendChild(btn);
        }
    });
}

// Exibe informa√ß√µes sobre o local selecionado
function showInfo(name, coordinates) {
    const messageBox = document.getElementById('message-box');
    messageBox.style.display = 'block';

    const info = translations[selectedLanguage][name.toLowerCase().replace(/\s+/g, '')] || `Informa√ß√µes detalhadas sobre ${name}`;
    messageBox.innerHTML = `<p>${info}</p>`;
    speakText(info);

    if (coordinates) {
        showRoute(coordinates);
    }
}

// Exibe a rota at√© o destino selecionado
function showRoute(destination) {
    if (routingControl) {
        map.removeControl(routingControl);
    }

    routingControl = L.Routing.control({
        waypoints: [
            L.latLng(currentLocation.latitude, currentLocation.longitude),
            L.latLng(destination[0], destination[1])
        ],
        router: L.Routing.osrmv1({
            serviceUrl: 'https://api.openrouteservice.org/v2/directions/foot-walking',
            profile: 'foot-walking',
            apiKey: '0XAI_Tzc3xqUoaaU_n7QYPgHAgd7bTSyuszQ2YjXSWQ'
        }),
        geocoder: L.Control.Geocoder.nominatim(),
        createMarker: function() { return null; },
        routeWhileDragging: true,
        lineOptions: {
            styles: [{ color: 'blue', opacity: 1, weight: 5 }]
        }
    }).addTo(map);
}

// Fun√ß√£o para alternar a visibilidade do menu
function toggleMenu() {
    const menu = document.getElementById('menu');
    menu.style.display = menu.style.display === 'none' ? 'block' : 'none';
}

// Fun√ß√£o para alternar a visibilidade dos submenus
function toggleSubMenu(subMenuId) {
    const subMenu = document.getElementById(subMenuId);
    subMenu.style.display = subMenu.style.display === 'none' ? 'block' : 'none';
}

// Fun√ß√£o para alternar a visibilidade da caixa de pesquisa
function toggleSearch() {
    const searchBox = document.getElementById('search-box');
    searchBox.style.display = searchBox.style.display === 'none' ? 'block' : 'none';
}

// Fun√ß√£o para buscar locais no mapa
function searchMap() {
    const query = document.getElementById('search-input').value;
    if (!query) {
        alert('Por favor, insira um termo de pesquisa.');
        return;
    }

    const url = `https://nominatim.openstreetmap.org/search?format=json&q=${query}&viewbox=-38.92,-13.37,-38.89,-13.38&bounded=1`;

    fetch(url)
        .then(response => response.json())
        .then(data => {
            const searchResults = data.map(place => ({
                name: place.display_name,
                lat: place.lat,
                lon: place.lon
            }));
            displaySearchResults(searchResults);
        })
        .catch(error => {
            console.error('Erro na busca:', error);
            alert('Erro ao buscar locais. Tente novamente mais tarde.');
        });
}

// Fun√ß√£o para exibir resultados de pesquisa
function displaySearchResults(results) {
    const subMenu = document.getElementById('searchResults');
    subMenu.innerHTML = ''; // Limpa o submenu antes de adicionar os novos elementos
    results.forEach(result => {
        const btn = document.createElement('button');
        btn.className = 'submenu-btn';
        btn.textContent = result.name;
        btn.onclick = () => showInfo(result.name, [result.lat, result.lon]);
        subMenu.appendChild(btn);
    });
}

// Fun√ß√£o para iniciar o reconhecimento de voz
function startVoiceRecognition() {
    if ('webkitSpeechRecognition' in window) {
        const recognition = new webkitSpeechRecognition();
        recognition.lang = selectedLanguage === 'pt' ? 'pt-BR' : selectedLanguage;
        recognition.continuous = false;
        recognition.interimResults = false;

        recognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            handleVoiceCommand(transcript);
        };

        recognition.onerror = function(event) {
            console.error('Erro no reconhecimento de voz:', event.error);
            alert('Erro no reconhecimento de voz. Tente novamente.');
        };

        recognition.onend = function() {
            console.log('Reconhecimento de voz encerrado.');
        };

        recognition.start();
    } else {
        alert('API de reconhecimento de voz n√£o suportada neste navegador.');
    }
}

// Fun√ß√£o para lidar com comandos de voz
function handleVoiceCommand(command) {
    const lowerCommand = command.toLowerCase();
    if (lowerCommand.includes('mapa')) {
        toggleMenu();
    } else if (lowerCommand.includes('hist√≥ria')) {
        showInfo('Hist√≥ria de Morro de S√£o Paulo');
    } else if (lowerCommand.includes('praias')) {
        loadSubMenu('praiasSubMenu');
    } else if (lowerCommand.includes('pontos tur√≠sticos')) {
        loadSubMenu('pontosTuristicosSubMenu');
    } else {
        alert(`Comando de voz n√£o reconhecido: ${command}`);
    }
}

// Fun√ß√µes para compartilhar nas redes sociais
function shareOnFacebook() {
    const url = encodeURIComponent(window.location.href);
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}`, '_blank');
}

function shareOnTwitter() {
    const url = encodeURIComponent(window.location.href);
    const text = encodeURIComponent('Confira o Morro Digital!');
    window.open(`https://twitter.com/intent/tweet?url=${url}&text=${text}`, '_blank');
}

function shareOnInstagram() {
    alert('Compartilhamento no Instagram n√£o √© suportado diretamente. Por favor, copie o link e cole no seu Instagram.');
}

// Fun√ß√£o para exibir e ocultar modais
function openModal(modalId) {
    document.getElementById(modalId).style.display = 'block';
}

function closeModal(modalId) {
    document.getElementById(modalId).style.display = 'none';
}

// Inicializa o mapa e mostra o modal de boas-vindas ao carregar a p√°gina
window.addEventListener('load', () => {
    openModal('welcome-modal');
});

// Dados de perguntas e respostas para o planejamento de viagens
const questions = [
    "Qual √© o seu nome?",
    "De onde voc√™ √©? (Estado e cidade)",
    "√â a primeira vez que visita o Morro de S√£o Paulo?",
    "Quais atividades j√° realizou em Morro desde que chegou?",
    "J√° visitou ou conhece a famosa Toca do Morcego?",
    "Quais pontos tur√≠sticos j√° visitou?",
    "Quais praias j√° conheceu?",
    "J√° realizou algum passeio em Morro? Se sim, qual?",
    "J√° foi a alguma festa em Morro? Quais as op√ß√µes de festas dispon√≠veis s√£o mais do seu agrado?",
    "Qual o tipo de gastronomia tem mais interesse em experimentar?",
    "Tem prefer√™ncia por local pr√≥ximo √† vila ou √†s praias?",
    "Atualmente, qual √© o valor que voc√™ tem dispon√≠vel para utilizar?",
    "Quantos dias pretende ficar em Morro de S√£o Paulo?",
    "Prefere atividades mais tranquilas ou mais aventureiras?"
];

// Fun√ß√£o para gerar o roteiro personalizado com base nas respostas do usu√°rio
function generateItinerary(answers) {
    const [name, location, firstTime, activities, morcego, points, beaches, tour, party, cuisine, proximity, budget, days, preference] = answers;
    const totalDays = parseInt(days) || 3;

    const itinerary = {
        name: name,
        days: totalDays,
        activities: []
    };

    for (let i = 1; i <= totalDays; i++) {
        const dayPlan = { day: i, activities: [] };

        if (i === 1) {
            if (firstTime.toLowerCase() === 'sim') {
                dayPlan.activities.push("Visita √† Toca do Morcego", "Passeio pelas praias principais");
            } else {
                dayPlan.activities.push("Passeio por pontos tur√≠sticos menos conhecidos", "Explora√ß√£o das praias alternativas");
            }
        } else if (i === totalDays) {
            if (budget && parseInt(budget) > 1000) {
                dayPlan.activities.push("Passeio de barco pelas ilhas pr√≥ximas", "Visita a uma pousada de luxo");
            } else {
                dayPlan.activities.push("Passeio de barco econ√¥mico", "Explora√ß√£o de atra√ß√µes gratuitas");
            }
        } else {
            if (party.toLowerCase() === 'sim') {
                dayPlan.activities.push("Festa noturna em Morro", "Jantar em um restaurante de gastronomia local");
            } else {
                dayPlan.activities.push("Tour hist√≥rico pelo centro de Morro de S√£o Paulo", "Jantar em um restaurante de gastronomia local");
            }
        }

        if (preference.toLowerCase() === 'tranquilas') {
            dayPlan.activities.push("Visita a um spa", "Caminhada tranquila pela praia");
        } else {
            dayPlan.activities.push("Aventura de tirolesa", "Mergulho nas praias");
        }

        itinerary.activities.push(dayPlan);
    }

    return itinerary;
}

// Fun√ß√£o para exibir o roteiro personalizado
function displayItinerary(itinerary) {
    const itineraryContent = document.getElementById('itinerary-content');
    itineraryContent.innerHTML = `<h2>Roteiro de ${itinerary.days} Dias para ${itinerary.name}</h2>`;

    itinerary.activities.forEach(dayPlan => {
        const dayDiv = document.createElement('div');
        dayDiv.innerHTML = `<h3>Dia ${dayPlan.day}</h3>`;
        dayPlan.activities.forEach(activity => {
            const activityItem = document.createElement('p');
            activityItem.textContent = activity;
            dayDiv.appendChild(activityItem);
        });
        itineraryContent.appendChild(dayDiv);
    });

    document.getElementById('itinerary-box').style.display = 'block';

    // Solicitar feedback ap√≥s exibir o roteiro
    setTimeout(requestItineraryFeedback, 1000);
}

// Fun√ß√£o para solicitar feedback do usu√°rio sobre o roteiro
function requestItineraryFeedback() {
    const feedbackBox = document.getElementById('feedback-box');
    feedbackBox.innerHTML = `
        <h2>Feedback do Roteiro</h2>
        <p>O que voc√™ achou do roteiro?</p>
        <textarea id="feedback-input" rows="4" cols="50"></textarea>
        <button onclick="submitFeedback()">Enviar Feedback</button>
    `;
    feedbackBox.style.display = 'block';
}

// Fun√ß√£o para enviar o feedback do usu√°rio
function submitFeedback() {
    const feedbackInput = document.getElementById('feedback-input').value.trim();
    if (feedbackInput) {
        console.log('Feedback recebido:', feedbackInput);
        alert('Obrigado pelo seu feedback!');
        document.getElementById('feedback-box').style.display = 'none';
        adjustItinerary(feedbackInput);
    } else {
        alert('Por favor, insira seu feedback.');
    }
}

// Fun√ß√£o para ajustar o roteiro com base no feedback do usu√°rio
function adjustItinerary(feedback) {
    console.log('Ajustando o roteiro com base no feedback:', feedback);
    if (feedback.toLowerCase().includes('mais tempo na praia')) {
        itinerary.activities.forEach(dayPlan => {
            dayPlan.activities.push("Mais tempo de lazer na praia");
        });
    } else if (feedback.toLowerCase().includes('menos caminhadas')) {
        itinerary.activities.forEach(dayPlan => {
            dayPlan.activities = dayPlan.activities.filter(activity => !activity.toLowerCase().includes('caminhada'));
        });
    } else if (feedback.toLowerCase().includes('mais atividades culturais')) {
        itinerary.activities.forEach(dayPlan => {
            dayPlan.activities.push("Visita a museus e centros culturais");
        });
    } else if (feedback.toLowerCase().includes('mais aventura')) {
        itinerary.activities.forEach(dayPlan => {
            dayPlan.activities.push("Atividades de aventura, como trilhas e tirolesa");
        });
    }

    // Reexibir o roteiro ajustado
    displayItinerary(itinerary);
}

// Fun√ß√£o para exibir o roteiro personalizado
function displayItinerary(itinerary) {
    const itineraryContent = document.getElementById('itinerary-content');
    itineraryContent.innerHTML = `<h2>Roteiro de ${itinerary.days} Dias para ${itinerary.name}</h2>`;

    itinerary.activities.forEach(dayPlan => {
        const dayDiv = document.createElement('div');
        dayDiv.innerHTML = `<h3>Dia ${dayPlan.day}</h3>`;
        dayPlan.activities.forEach(activity => {
            const activityItem = document.createElement('p');
            activityItem.textContent = activity;
            dayDiv.appendChild(activityItem);
        });
        itineraryContent.appendChild(dayDiv);
    });

    document.getElementById('itinerary-box').style.display = 'block';

    // Solicitar feedback ap√≥s exibir o roteiro
    setTimeout(requestItineraryFeedback, 1000);

    // Adicionar bot√£o de salvar roteiro
    const saveButton = document.createElement('button');
    saveButton.textContent = 'Salvar Roteiro';
    saveButton.onclick = () => saveItinerary(itinerary);
    itineraryContent.appendChild(saveButton);

    // Adicionar bot√£o de compartilhar roteiro
    const shareButton = document.createElement('button');
    shareButton.textContent = 'Compartilhar Roteiro';
    shareButton.onclick = () => shareItinerary(itinerary);
    itineraryContent.appendChild(shareButton);
}

// Fun√ß√£o para compartilhar o roteiro nas redes sociais
function shareItinerary(itinerary) {
    const itineraryText = `Roteiro de ${itinerary.days} Dias para ${itinerary.name}:\n`;
    itinerary.activities.forEach(dayPlan => {
        itineraryText += `\nDia ${dayPlan.day}:\n`;
        dayPlan.activities.forEach(activity => {
            itineraryText += `- ${activity}\n`;
        });
    });

    const shareText = encodeURIComponent(itineraryText);
    const shareUrl = encodeURIComponent(window.location.href);
    const twitterUrl = `https://twitter.com/intent/tweet?text=${shareText}&url=${shareUrl}`;
    window.open(twitterUrl, '_blank');
}

// Fun√ß√£o para salvar o roteiro personalizado no localStorage
function saveItinerary(itinerary) {
    localStorage.setItem('savedItinerary', JSON.stringify(itinerary));
    alert('Roteiro salvo com sucesso!');
}

// Fun√ß√£o para carregar o roteiro personalizado do localStorage
function loadItinerary() {
    const savedItinerary = localStorage.getItem('savedItinerary');
    if (savedItinerary) {
        const itinerary = JSON.parse(savedItinerary);
        displayItinerary(itinerary);
    } else {
        alert('Nenhum roteiro salvo encontrado.');
    }
}

// Fun√ß√£o para iniciar o planejamento de viagens
function startTravelPlanning() {
    // Perguntas de planejamento de viagem
    let answers = [];
    for (let question of questions) {
        let answer = prompt(question);
        if (!answer) {
            alert('Por favor, responda todas as perguntas.');
            return;
        }
        answers.push(answer);
    }

    // Gerar e exibir o roteiro com base nas respostas
    const itinerary = generateItinerary(answers);
    displayItinerary(itinerary);

    // Op√ß√£o para salvar o roteiro
    const saveButton = document.createElement('button');
    saveButton.textContent = 'Salvar Roteiro';
    saveButton.onclick = () => saveItinerary(itinerary);
    document.getElementById('itinerary-content').appendChild(saveButton);
}

// Fun√ß√£o para ajustar o roteiro com base no feedback do usu√°rio
function adjustItinerary(feedback) {
    console.log('Ajustando o roteiro com base no feedback:', feedback);
    const feedbackLower = feedback.toLowerCase();
    if (feedbackLower.includes('mais tempo na praia')) {
        itinerary.activities.forEach(dayPlan => {
            dayPlan.activities.push("Mais tempo de lazer na praia");
        });
    } else if (feedbackLower.includes('menos caminhadas')) {
        itinerary.activities.forEach(dayPlan => {
            dayPlan.activities = dayPlan.activities.filter(activity => !activity.toLowerCase().includes('caminhada'));
        });
    } else if (feedbackLower.includes('mais atividades culturais')) {
        itinerary.activities.forEach(dayPlan => {
            dayPlan.activities.push("Visita a museus e centros culturais");
        });
    } else if (feedbackLower.includes('mais aventura')) {
        itinerary.activities.forEach(dayPlan => {
            dayPlan.activities.push("Atividades de aventura, como trilhas e tirolesa");
        });
    }

    // Reexibir o roteiro ajustado
    displayItinerary(itinerary);
}
